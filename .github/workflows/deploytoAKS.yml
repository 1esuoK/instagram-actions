name: AKS Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Checks-out repository under $GITHUB_WORKSPACE
    - name: Checkout Source
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env: 
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: trituong/insta-aks-be:latest
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: 'docker.io/trituong/insta-aks-be:latest'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Build and push frontend docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: trituong/insta-aks-fe:latest

#    - name: Run Trivy vulnerability scanner
#      uses: aquasecurity/trivy-action@0.20.0
#      with:
#        image-ref: 'docker.io/trituong/insta-aks-fe:latest'
#        format: 'table'
#        exit-code: '1'
#        ignore-unfixed: true
#        vuln-type: 'os,library'
#        severity: 'CRITICAL,HIGH'

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to docker hub
      run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Azure Kubernetes set context
      uses: Azure/aks-set-context@v3
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        # Resource Group Name
        resource-group: actions-aks-rg
        # AKS Cluster Name
        cluster-name: actions-aks-cluster

  # Create K8s secrets to pull images
    - name: Create secret in Kubernetes cluster
      uses: Azure/k8s-create-secret@v4
      with:
        # Container registry url
        container-registry-url: https://hub.docker.com/v2/
        # Container registry username
        container-registry-username: '${{secrets.DOCKER_USERNAME}}'
        # Container registry password
        container-registry-password:  '${{secrets.DOCKER_PASSWORD}}'
        # Type of Kubernetes secret.
        secret-type: docker-registry
        # Name of the secret.
        secret-name: docker-image-pull-secret
        
      # Deploy to k8s cluster
    - name: Deploy to Kubernetes cluster
      uses: Azure/k8s-deploy@v5
      with:        
        # Path to the manifest files which will be used for deployment.
        manifests: |
          deployment.yml
        # Fully qualified resource URL of the image(s) to be used for substitutions on the manifest files Example: contosodemo.azurecr.io/helloworld:test
        images: |
          trituong/insta-aks-be
          trituong/insta-aks-fe
        # Name of a docker-registry secret that has already been set up within the cluster. Each of these secret names are added under imagePullSecrets field for the workloads found in the input manifest files
        imagepullsecrets: docker-image-pull-secret
        # deploy/promote/reject
        action: deploy
        
    
        
    
